package com.example.followme.Routing;
import java.util.ArrayList;

public class RouteHandler {
	private ArrayList<Route> routeList;
	
	/*
	 * The route handler is mainly a tool for the Route manager, it handles a bunch of routes generated by a function
	 * and it returns an array containing said routes.
	 */
	
	public RouteHandler(){
		routeList = new ArrayList<Route>();
	}
	
	/*
	 * addRoute allows a single route to be added to the array
	 * @param _route is the route to be added.
	 */
	public void addRoute(Route route){
		routeList.add(route);
	}
	
	/*
	 * create and add route takes a bunch of nodes turns it into a route and adds the route to the array.
	 * @param _data	aforementioned nodes to be turned into a route (has to be in order from start to 1 node from finish.).
	 * @param _endNode the last node in the route.
	 * @param _weight Is the weight of the route, later on to be used for selected routes and the likes.
	 */
	public void createAndAddRoute(Node[] _data, Node endNode, double _weight){
		Route route = new Route(_data[0]);
		route.weight = _weight;
		for(int i = 1; i < _data.length; i++){
			route.addNode(_data[i]);
		}
		route.addNode(endNode);
		addRoute(route);
	}
	
	/*
	 * returnRouteRay is the function that creates an array suitable for later use in different classes.
	 * @return The actual Array of the type Route, that is to be returned for later manipulation
	 */
	public Route[] returnRouteRay(){
		Route[] routeRay;
		if(routeList.size() == 0){
			routeRay = null;
		}else{
			routeRay = routeList.toArray(new Route[0]);
		}
		return routeRay;
	}


}
